//package com.socket.webrtc;
//
//import android.Manifest;
//import android.content.pm.PackageManager;
//import android.support.v4.app.ActivityCompat;
//import android.support.v4.content.ContextCompat;
//import android.support.v7.app.AppCompatActivity;
//import android.os.Bundle;
//import android.util.Log;
//import android.view.View;
//import android.widget.Button;
//import android.widget.Toast;
//
//import org.webrtc.AudioSource;
//import org.webrtc.AudioTrack;
//import org.webrtc.Camera1Enumerator;
//import org.webrtc.CameraEnumerator;
//import org.webrtc.CameraVideoCapturer;
//import org.webrtc.EglBase;
//import org.webrtc.IceCandidate;
//import org.webrtc.MediaConstraints;
//import org.webrtc.MediaStream;
//import org.webrtc.PeerConnection;
//import org.webrtc.PeerConnectionFactory;
//import org.webrtc.SessionDescription;
//import org.webrtc.SurfaceViewRenderer;
//import org.webrtc.VideoCapturer;
//import org.webrtc.VideoRenderer;
//import org.webrtc.VideoSource;
//import org.webrtc.VideoTrack;
//import org.webrtc.Camera1Capturer;
//
//import org.webrtc.Camera1Enumerator;
//import org.webrtc.Camera2Enumerator;
//import org.webrtc.CameraEnumerator;
//import org.webrtc.CameraVideoCapturer;
//
//import java.util.ArrayList;
//import java.util.List;
//
//public class Main2Activity extends AppCompatActivity implements View.OnClickListener{
//
//    private static final String TAG = "MainActivity";
//    Button start, call, hangup;
//
//    SurfaceViewRenderer localVideoView;
//    SurfaceViewRenderer remoteVideoView;
//    VideoRenderer localRenderer;
//    VideoRenderer remoteRenderer;
//
//    PeerConnectionFactory peerConnectionFactory;
//    MediaConstraints audioConstraints;
//    MediaConstraints videoConstraints;
//    MediaConstraints sdpConstraints;
//    VideoSource videoSource;
//    VideoTrack localVideoTrack;
//    AudioSource audioSource;
//    AudioTrack localAudioTrack;
//
//    private final int MY_PERMISSIONS_REQUEST_CAMERA = 100;
//    private final int MY_PERMISSIONS_REQUEST_RECORD_AUDIO = 101;
//    private final int MY_PERMISSIONS_REQUEST = 102;
//
//    PeerConnection localPeer, remotePeer;
//
//    @Override
//    protected void onCreate(Bundle savedInstanceState) {
//        super.onCreate(savedInstanceState);
//        setContentView(R.layout.activity_main2);
//
//        //askForPermissions();
//        initViews();
//        initVideos();
//    }
//
//    public void askForPermissions() {
//        if ((ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
//                != PackageManager.PERMISSION_GRANTED) &&
//                (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)
//                        != PackageManager.PERMISSION_GRANTED)) {
//            ActivityCompat.requestPermissions(this,
//                    new String[]{Manifest.permission.CAMERA, Manifest.permission.RECORD_AUDIO},
//                    MY_PERMISSIONS_REQUEST);
//        } else if (ContextCompat.checkSelfPermission(this,
//                Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {
//            ActivityCompat.requestPermissions(this,
//                    new String[]{Manifest.permission.RECORD_AUDIO},
//                    MY_PERMISSIONS_REQUEST_RECORD_AUDIO);
//
//        } else if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
//                != PackageManager.PERMISSION_GRANTED) {
//            ActivityCompat.requestPermissions(this,
//                    new String[]{Manifest.permission.CAMERA},
//                    MY_PERMISSIONS_REQUEST_CAMERA);
//        }
//    }
//
//    private void initViews() {
//        start = (Button) findViewById(R.id.start_call);
//        call = (Button) findViewById(R.id.init_call);
//        hangup = (Button) findViewById(R.id.end_call);
//        localVideoView = (SurfaceViewRenderer) findViewById(R.id.local_gl_surface_view);
//        remoteVideoView = (SurfaceViewRenderer) findViewById(R.id.remote_gl_surface_view);
//
//        start.setOnClickListener(this);
//        call.setOnClickListener(this);
//        hangup.setOnClickListener(this);
//    }
//
//    private void initVideos() {
//        EglBase rootEglBase = EglBase.create();
//        localVideoView.init(rootEglBase.getEglBaseContext(), null);
//        remoteVideoView.init(rootEglBase.getEglBaseContext(), null);
//        localVideoView.setZOrderMediaOverlay(true);
//        remoteVideoView.setZOrderMediaOverlay(true);
//    }
//
////    // Cycle through likely device names for the camera and return the first
////    // capturer that works, or crash if none do.
////    private VideoCapturer getVideoCapturer(CameraVideoCapturer.CameraEventsHandler eventsHandler) {
//////        String[] cameraFacing = {"front", "back"};
//////        int[] cameraIndex = {0, 1};
//////        int[] cameraOrientation = {0, 90, 180, 270};
//////        for (String facing : cameraFacing) {
//////            for (int index : cameraIndex) {
//////                for (int orientation : cameraOrientation) {
//////                    String name = "Camera " + index + ", Facing " + facing +
//////                            ", Orientation " + orientation;
//////                    VideoCapturer capturer = new VideoCapturerAndroid(name, eventsHandler,false);
//////                    if (capturer != null) {
//////                        Log.d("Using camera: ", name);
//////                        return capturer;
//////                    }
//////                }
//////            }
//////        }
//////        throw new RuntimeException("Failed to open capture");
////        Camera1Enumerator cenum = new Camera1Enumerator();
////        String[] deviceNames = cenum.getDeviceNames();
////        for(String dev:deviceNames){
////            if(cenum.isBackFacing(dev)) return cenum.createCapturer(dev,null);
////        }
////
////        for(String dev:deviceNames){
////            if(cenum.isFrontFacing(dev)) return cenum.createCapturer(dev,null);
////        }
////
////        return null;
////    }
//
//
//    private VideoCapturer createVideoCapturer() {
//        VideoCapturer videoCapturer;
//        videoCapturer = createCameraCapturer(new Camera1Enumerator(false));
//        return videoCapturer;
//    }
//
//    private VideoCapturer createCameraCapturer(CameraEnumerator enumerator) {
//        final String[] deviceNames = enumerator.getDeviceNames();
//
//        // Trying to find a front facing camera!
//        for (String deviceName : deviceNames) {
//            if (enumerator.isFrontFacing(deviceName)) {
//                VideoCapturer videoCapturer = enumerator.createCapturer(deviceName, null);
//
//                if (videoCapturer != null) {
//                    return videoCapturer;
//                }
//            }
//        }
//
//        // We were not able to find a front cam. Look for other cameras
//        for (String deviceName : deviceNames) {
//            if (!enumerator.isFrontFacing(deviceName)) {
//                VideoCapturer videoCapturer = enumerator.createCapturer(deviceName, null);
//                if (videoCapturer != null) {
//                    return videoCapturer;
//                }
//            }
//        }
//
//        return null;
//    }
//
//    @Override
//    public void onClick(View v) {
//        switch (v.getId()) {
//            case R.id.start_call: {
//                start();
//                break;
//            }
//            case R.id.init_call: {
//                call();
//                break;
//            }
//            case R.id.end_call: {
//                hangup();
//                break;
//            }
//        }
//    }
//
//
//
//    public void start() {
//        start.setEnabled(false);
//        call.setEnabled(true);
//        //Initialize PeerConnectionFactory globals.
//        //Params are context, initAudio,initVideo and videoCodecHwAcceleration
//        PeerConnectionFactory.initializeAndroidGlobals(this, true, true, true);
//
//        //Create a new PeerConnectionFactory instance.
//        PeerConnectionFactory.Options options = new PeerConnectionFactory.Options();
//        peerConnectionFactory = new PeerConnectionFactory(options);
//
//
//        //Now create a VideoCapturer instance. Callback methods are there if you want to do something! Duh!
////        VideoCapturer videoCapturerAndroid = getVideoCapturer(new CustomCameraEventsHandlers());
//        VideoCapturer videoCapturerAndroid = createVideoCapturer();
//
//
//        //Create MediaConstraints - Will be useful for specifying video and audio constraints.
//        audioConstraints = new MediaConstraints();
//        videoConstraints = new MediaConstraints();
//
//        //Create a VideoSource instance
//        videoSource = peerConnectionFactory.createVideoSource(videoCapturerAndroid);
//        localVideoTrack = peerConnectionFactory.createVideoTrack("100", videoSource);
//
//        //create an AudioSource instance
//        audioSource = peerConnectionFactory.createAudioSource(audioConstraints);
//        localAudioTrack = peerConnectionFactory.createAudioTrack("101", audioSource);
//        localVideoView.setVisibility(View.VISIBLE);
//        videoCapturerAndroid.startCapture(1000, 1000, 30);
//        //create a videoRenderer based on SurfaceViewRenderer instance
//        localRenderer = new VideoRenderer(localVideoView);
//        // And finally, with our VideoRenderer ready, we
//        // can add our renderer to the VideoTrack.
//        localVideoTrack.addRenderer(localRenderer);
//        localVideoView.setMirror(true);
//        remoteVideoView.setMirror(true);
//
//    }
//
//    private void call() {
//        start.setEnabled(false);
//        call.setEnabled(false);
//        hangup.setEnabled(true);
//        //we already have video and audio tracks. Now create peerconnections
//        List<PeerConnection.IceServer> iceServers = new ArrayList<>();
//
//        iceServers.add(new org.webrtc.PeerConnection.IceServer("stun:stun2.1.google.com:19302"));
//        iceServers.add(new org.webrtc.PeerConnection.IceServer("turn:numb.viagenie.ca", "webrtc@live.com", "muazkh"));
//
//        //create sdpConstraints
//        sdpConstraints = new MediaConstraints();
//        sdpConstraints.mandatory.add(new MediaConstraints.KeyValuePair("offerToReceiveAudio", "true"));
//        sdpConstraints.mandatory.add(new MediaConstraints.KeyValuePair("offerToReceiveVideo", "true"));
//
//        //creating localPeer
//        localPeer = peerConnectionFactory.createPeerConnection(iceServers, sdpConstraints, new CustomPeerConnectionObserver("localPeerCreation") {
//            @Override
//            public void onIceCandidate(IceCandidate iceCandidate) {
//                super.onIceCandidate(iceCandidate);
//                //Log.d("ABHI","ice\n");
//                onIceCandidateReceived(localPeer, iceCandidate);
//            }
//        });
//
//        //creating remotePeer
//        remotePeer = peerConnectionFactory.createPeerConnection(iceServers, sdpConstraints, new CustomPeerConnectionObserver("remotePeerCreation") {
//
//            @Override
//            public void onIceCandidate(IceCandidate iceCandidate) {
//                super.onIceCandidate(iceCandidate);
//                //Log.d("ABHI",iceCandidate+"\n");
//                onIceCandidateReceived(remotePeer, iceCandidate);
//            }
//
//            @Override
//            public void onAddStream(MediaStream mediaStream) {
//                super.onAddStream(mediaStream);
//                //Toast.makeText(Main2Activity.this, "stream", Toast.LENGTH_SHORT).show();
//                gotRemoteStream(mediaStream);
//            }
//
//            @Override
//            public void onIceGatheringChange(PeerConnection.IceGatheringState iceGatheringState) {
//                super.onIceGatheringChange(iceGatheringState);
//
//            }
//        });
//
//        //creating local mediastream
//        MediaStream stream = peerConnectionFactory.createLocalMediaStream("102");
//        stream.addTrack(localAudioTrack);
//        stream.addTrack(localVideoTrack);
//        localPeer.addStream(stream);
//
//        //creating Offer
//        localPeer.createOffer(new CustomSdpObserver("localCreateOffer"){
//            @Override
//            public void onCreateSuccess(SessionDescription sessionDescription) {
//                //we have localOffer. Set it as local desc for localpeer and remote desc for remote peer.
//                //try to create answer from the remote peer.
//                super.onCreateSuccess(sessionDescription);
//                localPeer.setLocalDescription(new CustomSdpObserver("localSetLocalDesc"), sessionDescription);
//                remotePeer.setRemoteDescription(new CustomSdpObserver("remoteSetRemoteDesc"), sessionDescription);
//                remotePeer.createAnswer(new CustomSdpObserver("remoteCreateOffer") {
//                    @Override
//                    public void onCreateSuccess(SessionDescription sessionDescription) {
//                        //remote answer generated. Now set it as local desc for remote peer and remote desc for local peer.
//                        super.onCreateSuccess(sessionDescription);
//                        remotePeer.setLocalDescription(new CustomSdpObserver("remoteSetLocalDesc"), sessionDescription);
//                        localPeer.setRemoteDescription(new CustomSdpObserver("localSetRemoteDesc"), sessionDescription);
//
//                    }
//                },new MediaConstraints());
//            }
//        },sdpConstraints);
//    }
//
//    private void hangup() {
//        localPeer.close();
//        remotePeer.close();
//        localPeer = null;
//        remotePeer = null;
//        start.setEnabled(true);
//        call.setEnabled(false);
//        hangup.setEnabled(false);
//    }
//
//    private void gotRemoteStream(MediaStream stream) {
//        //we have remote video stream. add to the renderer.
//        final VideoTrack videoTrack = stream.videoTracks.get(0);
//        //AudioTrack audioTrack = stream.audioTracks.getFirst();
//        runOnUiThread(new Runnable() {
//            @Override
//            public void run() {
//                try {
//                    remoteRenderer = new VideoRenderer(remoteVideoView);
//                    remoteVideoView.setVisibility(View.VISIBLE);
//                    videoTrack.addRenderer(remoteRenderer);
//
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//            }
//        });
//
//    }
//
//
//    public void onIceCandidateReceived(PeerConnection peer, IceCandidate iceCandidate) {
//        //we have received ice candidate. We can set it to the other peer.
//        if (peer == localPeer) {
//            remotePeer.addIceCandidate(iceCandidate);
//        } else {
//            localPeer.addIceCandidate(iceCandidate);
//        }
//    }
//
//}